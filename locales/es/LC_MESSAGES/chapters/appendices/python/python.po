# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024
# This file is distributed under the same license as the bioimage-book
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: bioimage-book \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-05 16:49+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../../chapters/appendices/python/python.md:15
msgid "Python Primer"
msgstr ""

#: ../../../chapters/appendices/python/python.md:19
msgid "Work in progress!"
msgstr ""

#: ../../../chapters/appendices/python/python.md:22
msgid "This section isn't complete yet."
msgstr ""

#: ../../../chapters/appendices/python/python.md:27
msgid ""
"This section aims to provide *just enough* info to demystify the weird "
"symbols and to get started with the Python "
"[Python](https://www.python.org) programming language."
msgstr ""

#: ../../../chapters/appendices/python/python.md:29
msgid ""
"To make sense of the code throughout this handbook see, it helps to be "
"familiar with four main things:"
msgstr ""

#: ../../../chapters/appendices/python/python.md:31
msgid "**Comments** - which help explain what's happening"
msgstr ""

#: ../../../chapters/appendices/python/python.md:32
msgid "**Variables** - which store values"
msgstr ""

#: ../../../chapters/appendices/python/python.md:33
msgid "**Functions** - which do stuff with variables"
msgstr ""

#: ../../../chapters/appendices/python/python.md:34
msgid ""
"**Modules** - which need to be imported to use the useful stuff (like "
"functions) they contain"
msgstr ""

#: ../../../chapters/appendices/python/python.md:36
msgid ""
"This is far from everything you need to know to master programming, but "
"it might just be enough to get started - and getting started if often the"
" hardest part."
msgstr ""

#: ../../../chapters/appendices/python/python.md:38
msgid ""
"I think it's fair to say that experienced programmers pick up most of "
"what they know as they go along: aided by a great deal of googling* along"
" the way."
msgstr ""

#: ../../../chapters/appendices/python/python.md:40
msgid "*-Or the use of some other preferred search engine."
msgstr ""

#: ../../../chapters/appendices/python/python.md:44
msgid "Comments"
msgstr ""

#: ../../../chapters/appendices/python/python.md:46
msgid ""
"Comments are explanations added to code that help explain what is going "
"on. They aren't essential for the code to *run*, but often are essential "
"to make sense of it. It's a very good idea to add comments to your own "
"code - either for others to read, or for yourself in the future."
msgstr ""

#: ../../../chapters/appendices/python/python.md:50
msgid "In Python, a typical comment starts with a `#`"
msgstr ""

#: ../../../chapters/appendices/python/python.md:58
msgid "Variables"
msgstr ""

#: ../../../chapters/appendices/python/python.md:60
msgid "Variables provide a place to store stuff: numbers, text, images and so on."
msgstr ""

#: ../../../chapters/appendices/python/python.md:62
msgid "You can think of it as a bit like algebra. If you see"
msgstr ""

#: ../../../chapters/appendices/python/python.md:65
msgid ""
"\n"
"x + 5\n"
msgstr ""

#: ../../../chapters/appendices/python/python.md:69
msgid "then *x* is the variable."
msgstr ""

#: ../../../chapters/appendices/python/python.md:71
msgid ""
"When programming, you'll likely use variables all the time for different "
"purposes and to represent different things. The type of the variable will"
" determine what you can do with it. Some examples are given below."
msgstr ""

#: ../../../chapters/appendices/python/python.md:77
msgid "Numbers"
msgstr ""

#: ../../../chapters/appendices/python/python.md:79
msgid ""
"A variable might be used to represent a number. You *assign* the number "
"to the variable using `=`."
msgstr ""

#: ../../../chapters/appendices/python/python.md:94
msgid ""
"It's important to note that `=` doesn't really mean 'is equal to' in this"
" case. Rather, when I see"
msgstr ""

#: ../../../chapters/appendices/python/python.md:99
msgid "in my mind I read *'x becomes 10'* or alternatively *'set x to 10'*."
msgstr ""

#: ../../../chapters/appendices/python/python.md:101
msgid ""
"The order is important: the variable being set is on the left and the "
"value it is being set to is on the right. Switching the order can give an"
" error - or a result you might not expect."
msgstr ""

#: ../../../chapters/appendices/python/python.md:120
msgid ""
"If you want to test if a variable is equal to something, you need to use "
"`==` instead. The output of that will be either `True` or `False`."
msgstr ""

#: ../../../chapters/appendices/python/python.md:133
msgid ""
"Note that, when using `==`, the order doesn't matter like it does with "
"`=`."
msgstr ""

#: ../../../chapters/appendices/python/python.md:140
msgid ""
"You aren't restricted to testing whether a variable itself is equal to a "
"specific value. Rather, you can incorporate extra calculations and "
"compare the results of these calculations to other values or variables."
msgstr ""

#: ../../../chapters/appendices/python/python.md:149
msgid "Strings"
msgstr ""

#: ../../../chapters/appendices/python/python.md:151
msgid "In computer parlance, a piece of text tends to be called a *string*."
msgstr ""

#: ../../../chapters/appendices/python/python.md:153
msgid "You can create a string by enclosing the text in some quotation marks."
msgstr ""

#: ../../../chapters/appendices/python/python.md:160
msgid "In Python, both single and double quotation marks can be used."
msgstr ""

#: ../../../chapters/appendices/python/python.md:162
msgid ""
"You can then do things like add strings together using the `+` symbol, "
"which has the effect of concatenating them to create a new string."
msgstr ""

#: ../../../chapters/appendices/python/python.md:171
msgid ""
"It doesn't *usually* matter whether you use single or double quotes, but "
"it can matter if you want to include the other kind of quotation mark "
"*within* the string."
msgstr ""

#: ../../../chapters/appendices/python/python.md:178
msgid ""
"In the example above, the `'` within 'wouldn't' was misinterpreted as the"
" end of the string, and an error is the result."
msgstr ""

#: ../../../chapters/appendices/python/python.md:180
msgid "There are two ways to get around that:"
msgstr ""

#: ../../../chapters/appendices/python/python.md:181
msgid "Use double-quotes"
msgstr ""

#: ../../../chapters/appendices/python/python.md:182
msgid "Use `\\'` to 'escape' the first quotation mark"
msgstr ""

#: ../../../chapters/appendices/python/python.md:189
msgid ""
"Another way to generate an error is to try to create a string that spans "
"multiple lines."
msgstr ""

#: ../../../chapters/appendices/python/python.md:197
msgid ""
"One way to get around that is to define the string using *3* double "
"quotation marks `\"\"\"`."
msgstr ""

#: ../../../chapters/appendices/python/python.md:199
msgid ""
"You can use multiline strings like this as an alternative to comments, to"
" avoid needing to add `#` at the beginning."
msgstr ""

#: ../../../chapters/appendices/python/python.md:209
msgid "Lists"
msgstr ""

#: ../../../chapters/appendices/python/python.md:213
msgid "Tuples"
msgstr ""

#: ../../../chapters/appendices/python/python.md:217
msgid "Numpy arrays"
msgstr ""

#: ../../../chapters/appendices/python/python.md:221
msgid "Dictionaries"
msgstr ""

#: ../../../chapters/appendices/python/python.md:225
msgid "Functions"
msgstr ""

#: ../../../chapters/appendices/python/python.md:229
msgid "Defining functions"
msgstr ""

#: ../../../chapters/appendices/python/python.md:233
msgid "Modules"
msgstr ""

