# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024
# This file is distributed under the same license as the bioimage-book package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: bioimage-book \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-05 16:49+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../chapters/1-concepts/4-colors/python.md:15
msgid "Python: Channels & colors"
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:17
msgid "This section gives a brief overview of some color-related considerations when using Python."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:19
msgid "See the [scikit-image color module](https://scikit-image.org/docs/dev/api/skimage.color.html) for a lot more useful info."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:31
msgid "RGB images"
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:33
msgid "Let's begin by reading the RGB image used on the title page of this book."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:43
msgid "If we check the shape of the image, we can see that the RGB information seems to be joined on at the end: the shape is in the form `[rows, columns, channels]`."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:49
msgid "RGB to single-channel"
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:51
msgid "We can convert an RGB image to a single-channel image in lots of ways."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:53
msgid "A single-channel image is often referred to as **grayscale** - although whether it is actually displayed using shades of gray or not depends upon the colormap."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:55
msgid "Split channels"
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:57
msgid "One option is to split the RGB channels to give three separate single-channel images."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:78
msgid "Averaging channels"
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:80
msgid "A second easy option is to simply calculate the average (mean) of the RGB values."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:91
msgid "However, it is common to calculate a *weighted* mean of the RGB values. Commonly the weights are"
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:94
msgid "0.2125 R + 0.7154 G + 0.0721 B"
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:96
msgid "This is what scikit-image's [`rgb2gray`](https://scikit-image.org/docs/stable/api/skimage.color.html#skimage.color.rgb2gray) does, as described [here](https://scikit-image.org/docs/stable/auto_examples/color_exposure/plot_rgb_to_gray.html)."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:108
msgid "To be fair, the simple mean and the weighted mean images don't look very different to me."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:110
msgid "To check if they really *are* different, we can show one subtracted from the other."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:118
msgid "Hmmmmm, this looks very suspicious. The fact the *difference* image looks the same suggests to me that some rescaling might have happened."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:121
msgid "So let's go back to checking the `dtype` comparing statistics."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:129
msgid "Right, that seems to suggest that `rgb2gray` has also rescaled our image during conversion."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:131
msgid "Indeed, it's reasonably common to work with 8-bit RGB images in Python (`uint8`) with values in the range 0-255, but it's perhaps even more common to work with floating point RGB images in the range 0-1 (either `float32` or `float64`). So we do need to be on the lookout for sneaky conversions."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:134
msgid "With that in mind, we can make our images comparable my dividing our `im_mean` by 255."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:143
msgid "This demonstrates that the pixel values are at least a bit different when converted using the weighted mean."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:147
msgid "Multichannel images"
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:149
msgid "Working with multichannel (non-RGB) images in Python is extremely easy in some ways, and very awkward in others."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:151
msgid "Although because most of the awkward stuff comes at the start, that will dominate the rest of this section."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:153
msgid "For example, even just opening the data properly can be a challenge."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:156
msgid "Reading multichannel images"
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:158
msgid "I like using [imageio](https://imageio.readthedocs.io/en/v2.9.0/userapi.html) to read images for its simplicity. However, if we rely upon `imageio.imread` for a multichannel tiff, we tend to just get the first channel."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:161
msgid "Later chapters will show other ways to open images."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:172
msgid "We can do better if we switch to `imageio.volread` to treat the image as a volume instead."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:182
msgid "The trouble now is that the channels appear at the *start* of our shape, whereas for the RGB image the channels were at the end."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:184
msgid "That may or may not matter - *because Python doesn't have a completely fixed convention for where the channels should be*."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:186
msgid "Some libraries assume 'channels-first', and some assume 'channels-last'."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:188
msgid "The good news is that, if you know what's required, you can easily move the channels to the right place."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:198
msgid "Displaying multichannel images"
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:200
msgid "Unfortunately, you can't easily show any arbitrary multichannel image using either channels-first or channels-last."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:214
msgid "Let's focus on channels-last, since it's more similar to how the RGB images behaved."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:216
msgid "We can show the channels one by one, as in the RGB case, or average the channels if we like - although the mean we get probably won't be a very meaningful mean."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:249
msgid "Adding color"
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:251
msgid "Unfortunately, we don't currently have any of the color information that could be used to display each channel. We can just choose a colormap, like with any other single-channel image, but we can't easily visualize channels merged together (at least with matplotlib... as far as I know)."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:254
msgid "But one this we *can* do is convert each of our channels to RGB, using a fixed color. Here is a helper function to do that."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:293
msgid "Creating composites"
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:295
msgid "Having done that, we can simply add our RGB images together to create a composite image - remembering to clip the result, so that we keep inside the range 0-1."
msgstr ""

#: ../../../chapters/1-concepts/4-colors/python.md:297
msgid "**Important!** We've moved away from colormaps here to change pixel values when creating RGB images. This gives us more control, but we need to remember that none of these modified images are suitable for quantitative analysis."
msgstr ""
