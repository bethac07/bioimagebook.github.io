# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024
# This file is distributed under the same license as the bioimage-book package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: bioimage-book \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-05 16:49+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../chapters/1-concepts/2-measurements/python.md:15
msgid "Python: Measurements & histograms"
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:19
msgid "Here, we will explore how to make measurements and generate histograms with Python."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:37
msgid "Introduction to NumPy arrays"
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:39
msgid "The images we are working with in Python are **NumPy arrays** - https://numpy.org"
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:41
msgid "Rather than plotting the image with `plt.imshow`, we can also simply print its values. Since there can be a *lot* of values (i.e. millions of pixels per image), only a few are shown by default."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:48
msgid "If we want to know how many values are in an image, we can query its `shape`."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:50
msgid "This returns the size in the order `(height, width)`."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:56
msgid "Whenever we have a 2D NumPy array, we can easily transpose it - which will switch the width and height values."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:65
msgid "Calculating statistics"
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:67
msgid "A more meaningful benefit of working with NumPy arrays, for our purposes at least, is that they enable us to calculate some summary statistics *extremely* easily."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:69
msgid "For example, to compute the average (mean) pixel value we can simply use `im.mean()`."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:75
msgid "If that's the last thing we add to a code cell, then the result will be displayed in our notebook."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:77
msgid "However, if we want to print multiple values - and multiple statistics - in quick succession we should use the `print` function again."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:86
msgid "Formatting output"
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:88
msgid "Things become more readable if we add some extra text, rather than just printing numbers."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:90
msgid "One of the easiest ways to do this is to use an 'f-string', which is in the form `f'Some text {some_variable}`."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:92
msgid "The part between the braces `{}` can be a calculation, and if you add `:.2f` at the end this will optionally limit the number of decimal places (here, to two)."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:101
msgid "Generating histograms"
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:103
msgid "We can now try to generate image histograms, using `plt.hist`."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:105
msgid "You might expect `plt.hist(im)` to work, just as `plt.imshow(im)` did previously. However, the result can be a bit surprising."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:113
msgid "The problem is that the image is 2D, and `plt.hist` is expecting just a single 1D list of values. We can generate that with a call to `.flatten()`, and use the flattened array to create the histogram."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:127
msgid "As with `plt.imshow`, we have lots of options to customize the histogram. This includes the ability to set the color or number of histogram bins."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:135
msgid "**Parentheses**"
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:137
msgid "It may initially be confusing why we sometimes need parentheses `()` and sometimes we don't, e.g. `im.flatten()` vs. `im.shape`."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:139
msgid "As a general rule, parentheses indicate that we're calling a method that *does* something (e.g. prints a value, calculates an average, flattens an array)."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:141
msgid "When we don't see parentheses, this indicates that we're accessing a field or property (e.g. the shape of an array)."
msgstr ""

#: ../../../chapters/1-concepts/2-measurements/python.md:143
msgid "In practice, the distinction can sometimes be a bit murky as you get deeper into Python - but it helps as a general guide."
msgstr ""
